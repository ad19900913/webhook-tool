version: '3.8'

services:
  webhook-tool:
    build: .
    container_name: webhook-tool-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - MAX_LOG_SIZE=100MB
      - LOG_RETENTION_DAYS=30
    volumes:
      - webhook-logs:/app/logs
      - webhook-config:/app/config
    restart: always
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - webhook-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 生产环境Redis集群
  redis-master:
    image: redis:7-alpine
    container_name: webhook-redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    restart: always
    networks:
      - webhook-prod-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-webhook123}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  redis-slave:
    image: redis:7-alpine
    container_name: webhook-redis-slave
    ports:
      - "6380:6379"
    volumes:
      - redis-slave-data:/data
    restart: always
    networks:
      - webhook-prod-network
    command: redis-server --slaveof redis-master 6379 --requirepass ${REDIS_PASSWORD:-webhook123}
    depends_on:
      - redis-master
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # 生产环境Nginx负载均衡
  nginx:
    image: nginx:alpine
    container_name: webhook-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    restart: always
    networks:
      - webhook-prod-network
    depends_on:
      - webhook-tool
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: webhook-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: always
    networks:
      - webhook-prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: webhook-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: always
    networks:
      - webhook-prod-network
    depends_on:
      - prometheus

volumes:
  webhook-logs:
    driver: local
  webhook-config:
    driver: local
  redis-master-data:
    driver: local
  redis-slave-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  webhook-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
